/**
 * ============================================================
 * 🧠 EchoMind Background Service Worker (v0.2.6)
 * Resilient version — self-healing background logic
 * ============================================================
 */

// Safe check for Chrome APIs
if (typeof chrome !== 'undefined' && chrome.runtime && chrome.action) {
  console.log('[EchoMind] Background worker initialized (v0.2.6)');

  // 🔄 Auto-recovery: Listen for suspend event (Manifest V3 lifecycle)
  self.addEventListener('activate', () => {
    console.log('[EchoMind] Worker activated.');
  });

  self.addEventListener('install', () => {
    console.log('[EchoMind] Worker installed.');
  });

  // 💡 Reinstate listeners when worker wakes up
  chrome.runtime.onStartup.addListener(() => {
    console.log('[EchoMind] Restored after Chrome restart.');
  });

  // Install/update handler - Setup context menu
  chrome.runtime.onInstalled.addListener(() => {
    console.log('🔥 EchoMind extension installed/updated');
    
    // Create context menu items
    chrome.contextMenus.removeAll(() => {
      const actions = ['Summarize', 'Explain', 'Simplify', 'Proofread', 'Save'];
      actions.forEach(action => {
        chrome.contextMenus.create({
          id: action.toLowerCase(),
          title: `✨ ${action}`,
          contexts: ['selection'],
        });
    try {
      chrome.contextMenus.create({
        id: 'echomind-summarize',
        title: 'EchoMind: Summarize',
        contexts: ['selection']
      });
    } catch (err) {
      console.warn('[EchoMind] Context menu already exists');
    }
  });

  // Handle messages from content scripts and popup
  chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {
    console.log('[EchoMind] Received message:', message.type);

    // Handle different message types
    switch (message.type) {
      case 'ping':
        // Health check from popup
        sendResponse({ ok: true, timestamp: Date.now() });
        break;

      case 'check_ai_availability':
        // This will be checked in the popup/content script context
        sendResponse({ available: true });
        break;

      case 'save_insight':
        // Storage operations are handled in the popup
        sendResponse({ success: true });
        break;

      case 'open_popup':
        // Handle popup open request
        sendResponse({ received: true });
        break;

      default:
        console.warn('[EchoMind] Unknown message type:', message.type);
        sendResponse({ error: 'Unknown message type' });
    }

    return true; // Keep the message channel open for async responses
  });

  // 🧩 Handle icon clicks (optional injection)
  chrome.action.onClicked.addListener(async (tab) => {
    try {
      if (tab.id) {
        await chrome.scripting.executeScript({
          target: { tabId: tab.id },
          files: ['content.js'],
        });
        console.log('[EchoMind] Content script injected.');
      }
    } catch (err) {
      console.warn('[EchoMind] Script injection failed:', err);
    }
  });

  // Context menu click handler
  chrome.contextMenus.onClicked.addListener((info, tab) => {
    if (info.menuItemId === 'echomind-summarize' && tab?.id) {
      chrome.tabs.sendMessage(tab.id, {
        type: 'context_menu_action',
        action: 'summarize',
        text: info.selectionText
      }).catch(err => {
        console.warn('[EchoMind] Failed to send context menu message:', err);
      });
    }
  });

  // 🔁 Periodic ping to keep service worker alive
  setInterval(() => {
    console.debug('[EchoMind] heartbeat 💓');
  }, 1000 * 60 * 5); // every 5 minutes

  // 🔥 Crash guard: Catch unexpected errors
  self.onerror = (msg, src, line, col, err) => {
    console.error('[EchoMind] Background crash captured:', msg, src, line, col);
    return true; // prevent Chrome console spam
  };

  // Unhandled promise rejection guard
  self.addEventListener('unhandledrejection', (event) => {
    console.error('[EchoMind] Unhandled promise rejection:', event.reason);
  });

} else {
  console.warn('[EchoMind] Chrome runtime unavailable in background.');
}
